==========================================================================================================
pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 500)
pd.options.mode.chained_assignment = None   # avoids assignment warning

from tqdm import tqdm
tqdm.pandas()                               # enable progress bars in pandas operations


df_train = df_train[~df_train.id.isin(all_imgs)]

from scipy import stats
df_train.groupby(["NameTitle", "Sex"]).Age.agg(lambda x: stats.mode(x)[0][0])


df_dataset_filled[targets].agg(['skew', 'kurtosis']).transpose()
==========================================================================================================




==========================================================================================================
df_train.groupby(by=["Embarked", "Sex"]).Survived.value_counts()

df_info = df_train.groupby("id").agg({"annotation": lambda x: list(x),  # 同一个 id 的所有 annotation 汇总成一个 list
                                      "cell_type": "first"}) \
                                .reset_index()


df_instances = df_train.groupby(['id']).agg({'annotation': 'count', 'cell_type': 'first'})
==========================================================================================================




==========================================================================================================
df_train[(df_train.Store==262) & (df_train.Sales>0)][["Date", "Sales"]]\
        .plot(x='Date',y='Sales',
              title='Store 262 sales distriution',
              figsize=(16,2),
              xlim=['2013-12-1', '2014-1-31'])
			  
			  

df_train.Sales[df_train.Open==0].hist(align="left")
==========================================================================================================



==========================================================================================================
df_names = df_train.Name.str.extract(r"([a-zA-Z]{,30}), ([a-zA-Z ]{,13})\. (.+)")\
                   .rename(columns={0:"FirstName", 
                                    1:"NameTitle", 
                                    2:"LastName"})

df_train_with_cabin = df_train.copy(deep=True)

df_train_with_cabin = pd.concat([df_train_with_cabin, df_names[["FirstName", "LastName"]]], axis=1)

df_train_with_cabin_grouped.sort_values(by="FirstNameNum", ascending=False)
==========================================================================================================






==========================================================================================================
df_housing["population"].apply(np.log).hist(ax=axs[1], bins=50)

df_housing_num = df_housing.select_dtypes(include=[np.number])
==========================================================================================================




==========================================================================================================
pd.DataFrame(history.history).plot(figsize=(8, 5), 
                                   xlim=[0, 29], 
                                   ylim=[0, 1], 
                                   grid=True, 
                                   xlabel="Epoch",
                                   style=["r--", "r--.", "b-", "b-*"])

plt.legend(loc="lower left")
save_fig("keras_learning_curves_plot")
plt.show()
==========================================================================================================






==========================================================================================================
df_ = df_train_clinical.groupby("patient_id").agg({"visit_id": "count",
                                                   "visit_month": ["min", "max"]})
==========================================================================================================





==========================================================================================================
# 如何从Pandas中的两列形成元组列
df['new_col'] = list(zip(df.lat, df.long))
==========================================================================================================



==========================================================================================================
with pd.option_context("display.min_rows", 4):    # 显示4行
    display(df_trpro)
	


type(df[[f'updrs_{i}']])       # pandas.core.frame.DataFrame
type(df[ f'updrs_{i}' ])       # pandas.core.series.Series
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================
==========================================================================================================